#!/usr/bin/env python3

import argparse
import base64
import config
import json
import os.path
from pprint import pprint
import requests
import sys
#import yara


class PrintColors:
    """Store some colors for fancy printing."""
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    RESET = '\033[0m' # Reset after printing a color


def vt_scan_file(file_path: str):
    """Scan a file using Virustotal."""

    # Virustotal Api v3 API endpoint
    upload_url = "https://www.virustotal.com/api/v3/files"

    # Safely load API key from config
    headers = {'x-apikey' : config.vt_api_key}

    files = {"file": (file_path, open(file_path, "rb"))}

    # Submit file for scanning
    response = requests.post(upload_url, headers=headers, files=files)

    if(response.status_code != 200):
        sys.exit("Error: File upload failed. Bad request.")

    pprint(response.json())
    
    # Grab file hash so we can pull down the results
    # Decode the base64 into bytes, then decode the bytes into utf-8
    id_decoded = base64.b64decode(response.json()['data']['id']).decode('utf-8')
    
    # Grab everything before the colon
    file_hash = id_decoded[0:id_decoded.find(":")]

    print(f"File hash: {file_hash}")
    
    # Web GUI url for the results
    web_url = "https://www.virustotal.com/gui/file/" + file_hash
    print(f"Check Virustotal results here: {web_url}")

    # Append decoded file hash to API endpoint
    results_url = upload_url + "/" + file_hash


    # Get scan results
    response = requests.request("GET", results_url, headers=headers)
    
    if(response.status_code != 200):
        sys.exit("Error: Report download failed. Bad request.")

    # save results to a file
    results_file_path = "scan_results/" + file_hash
    with open(results_file_path, 'w') as results_file:
        json.dump(response.json(), results_file, ensure_ascii=False, indent=4)

    print("Virustotal scan results saved to: {}".format(results_file_path))

    # Print a summary of the votes in green and red
    print(PrintColors.GREEN + "Total \"harmless\" votes: {}".format(response.json()['data']['attributes']['total_votes']['harmless']) + PrintColors.RESET)
    print(PrintColors.RED + "Total \"malicious\" votes: {}".format(response.json()['data']['attributes']['total_votes']['malicious']) + PrintColors.RESET)

def main():
    # Take file as input
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', required=True, help='Path of file to scan')
    args = parser.parse_args()

    print("Analyzing file: {}".format(args.file))

    if not os.path.exists(args.file):
        sys.exit("Error: File does not exist.")

    vt_scan_file(args.file)


if __name__ == "__main__":
    main()
